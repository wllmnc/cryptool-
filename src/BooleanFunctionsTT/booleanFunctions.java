/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package BooleanFunctionsTT;

import booleantools.AnalisysBF;
import booleantools.BooleanFunctionInfo;
import booleantools.BooleanToolsMain;
import booleantools.fileManagement;
import com.maplesoft.externalcall.MapleException;
import com.maplesoft.openmaple.Engine;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import utileria.Maple.HerramientaMaple;
import utileria.Maple.HerramientaMaple2;

/**
 *
 * @author wllmNunez
 */
public class booleanFunctions extends javax.swing.JFrame {

    /**
     * Creates new form booleanFunctions
     */
     private static List<BooleanFunctionInfo> comunityTemp;
     javax.swing.JTable jTable1;
       HerramientaMaple2 eng;
       String fileName="";
       private int grado;
       private String funcion;
       public String StringResults;
    public booleanFunctions() {
        /* try {
             //new HerramientaMaple2();
            
              eng = new HerramientaMaple2();
         } catch (MapleException ex) {
             Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
         }*/
         //this.eng = eng;
        initComponents();
//        this.spnAD.setValue(20);
//        this.spnBalance.setValue(20);
//        this.spnInA.setValue(20);
//        this.spnOEA.setValue(20);
//        this.spnNL.setValue(20);
        //this.pnlStatus.setVisible(false);
          String[] aTitles="i|FNA|Función|Peso|Grado|NL|InAn|InAbs".split("\\|");
          Object[][] thaoFuncion=new Object[0][8];
       jTable1 = new javax.swing.JTable();
         jTable1.setModel(new javax.swing.table.DefaultTableModel(
           thaoFuncion,aTitles
        ){ 
            /*public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }*/
        });
//         panelArea.setViewportView(jTable1);
//          activeChk(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtDegree = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtConditions = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFuncionBooleana = new javax.swing.JTextArea();
        btnModificar = new javax.swing.JButton();
        btnValidar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Boolcrypt");
        setMinimumSize(new java.awt.Dimension(638, 556));
        setPreferredSize(new java.awt.Dimension(605, 329));

        jLabel2.setText("Instrucciones de creación para funciones booleanas");

        jLabel1.setText("Orden");

        txtDegree.setText("0");
        txtDegree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDegreeActionPerformed(evt);
            }
        });

        jLabel3.setText("Condiciones");

        jLabel4.setText("Funcion Booleana");

        jButton1.setText("Crear ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtFuncionBooleana.setColumns(20);
        txtFuncionBooleana.setLineWrap(true);
        txtFuncionBooleana.setRows(5);
        txtFuncionBooleana.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFuncionBooleanaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFuncionBooleanaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFuncionBooleanaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtFuncionBooleana);

        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnValidar.setText("Validar");
        btnValidar.setEnabled(false);
        btnValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarActionPerformed(evt);
            }
        });

        jButton2.setText("Busqueda");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("?");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnValidar)
                                .addGap(17, 17, 17))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtConditions, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)))
                                .addGap(0, 67, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtConditions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(3, 3, 3)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnValidar))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Creación", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("tabCreate");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        findBF fbf=new findBF(this,true);
        fbf.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarActionPerformed
        // TODO add your handling code here:
        MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true,Integer.parseInt(this.txtDegree.getText()),this.txtFuncionBooleana.getText());
        //dialog.runAnalizer();
        dialog.setVisible(true);
        //dialog.run();
        //  dialog.runAnalizer();
    }//GEN-LAST:event_btnValidarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        MmodificateBF dialog = new MmodificateBF(new javax.swing.JFrame(), true,Integer.parseInt(this.txtDegree.getText()),this.txtFuncionBooleana.getText());
        dialog.show();
        this.txtFuncionBooleana.setText(dialog.getFuncion());
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtFuncionBooleanaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFuncionBooleanaKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if(caracter == java.awt.event.KeyEvent.VK_ENTER)
        {
            this.btnValidar.setFocusPainted(true);
            evt.consume();
        }else{
            if(((caracter < '0') ||
                (caracter > '1')))
        {
            evt.consume();
        }
        }
    }//GEN-LAST:event_txtFuncionBooleanaKeyTyped

    private void txtFuncionBooleanaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFuncionBooleanaKeyReleased
        // TODO add your handling code here:
        this.txtFuncionBooleana.setText(this.txtFuncionBooleana.getText().replaceAll("\n",""));
        int lenghtText=this.txtFuncionBooleana.getText().length();
        int iN=(int)Math.ceil((Math.log((lenghtText>0)?lenghtText:1)/Math.log(2)));
        this.txtDegree.setText(iN+"");
        boolean isActive=false;
        if(lenghtText>1)
        {
            isActive=true;
        }
        this.btnModificar.setEnabled(isActive);
        this.btnValidar.setEnabled(isActive);
    }//GEN-LAST:event_txtFuncionBooleanaKeyReleased

    private void txtFuncionBooleanaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFuncionBooleanaKeyPressed
        // TODO add your handling code here:
        /*
        int lenghtText=this.txtFuncionBooleana.getText().length();
        int iN=(int)Math.ceil((Math.log((lenghtText>0)?lenghtText:1)/Math.log(2)));
        this.txtDegree.setText(iN+"");
        boolean isActive=false;
        if(lenghtText>1)
        {
            isActive=true;
        }
        this.btnModificar.setEnabled(isActive);
        this.btnValidar.setEnabled(isActive);*/
    }//GEN-LAST:event_txtFuncionBooleanaKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int orden=0;
        try{
            orden=Integer.parseInt(this.txtDegree.getText());
        }catch(NumberFormatException ex)
        {
        }
        if(orden>0){
            String sConditions="";
            if(this.txtConditions.getText().equals(""))
            {
                sConditions="wt(x):>=:0<-r";
            }else{
                sConditions=this.txtConditions.getText();
            }
        AnalisysBFLocal an= new AnalisysBFLocal();
        String  fBooleanResult=an.createBooleanFunction(Integer.parseInt(this.txtDegree.getText()),sConditions, "");
        this.txtFuncionBooleana.setText(fBooleanResult);
        boolean isActive=false;
        if(this.txtFuncionBooleana.getText().length()>1)
        {
            isActive=true;
        }
        this.btnModificar.setEnabled(isActive);
        this.btnValidar.setEnabled(isActive);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtDegreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDegreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDegreeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        helpWindow helpwindow=new helpWindow(this,true);
        helpwindow.setVisible(true);
        
        
    }//GEN-LAST:event_jButton3ActionPerformed
    public static int percentForProperties()
    {
        return 100/5;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(booleanFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(booleanFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(booleanFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(booleanFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new booleanFunctions().setVisible(true);
            }
        });
    }
    public void setBooleanFunction(String newBooleanFunction)
    {
        this.txtFuncionBooleana.setText(newBooleanFunction);
    }
//    public void initGeneticAlgorithm(HerramientaMaple2 eng)
//    {
//        this.pnlStatus.setVisible(true);
//        this.btnFind.setEnabled(false);
//        if(this.chkNotRandom.isSelected())
//        {
//            this.txtCM.setEnabled(false);
//            this.btnHelp.setEnabled(false);
//            this.chkRandom.setEnabled(false);
//        }
//        this.btnOpenRecords.setEnabled(false);
//        this.txtBDegree.setEnabled(false);
//        this.txtDifferentNumberBooleanf.setEnabled(false);
//        this.spnAD.setEnabled(false);
//        this.spnInA.setEnabled(false);
//        this.spnNL.setEnabled(false);
//        this.spnBalance.setEnabled(false);
//        this.spnOEA.setEnabled(false);
//        int iDegree=Integer.parseInt(this.txtBDegree.getText());
//        int iDifferentNBF=Integer.parseInt(this.txtDifferentNumberBooleanf.getText());
//        String sConditions1="wt(x):>=:0<-r";
//        if(this.chkNotRandom.isSelected())
//        {
//            sConditions1=(this.txtCM.getText().equals(""))?sConditions1:this.txtCM.getText();
//        }
//        int heuristicAnI=(int)(this.spnInA.getValue());
//        int heuristicAD=(int)(this.spnAD.getValue());
//        int heuristicNL=(int)(this.spnNL.getValue());
//        int heuristicBalanced=(int)(this.spnBalance.getValue());
//        int heuristicAI=(int)(this.spnOEA.getValue());
//        
//        runGeneticAlgorithm( iDegree, iDifferentNBF, sConditions1, heuristicAnI, heuristicAD, heuristicNL, heuristicBalanced, heuristicAI,lblNIteration, lblNGRPP,lblGR,lblSumaryNL,lblSumaryOEA,lblSumaryAD,lblSumaryWeith,lblSumaryInA,eng);
//        
//        this.btnFind.setEnabled(true);
//        if(this.chkNotRandom.isSelected())
//        {
//            this.txtCM.setEnabled(true);
//            this.btnHelp.setEnabled(true);
//            this.chkRandom.setEnabled(true);
//        }
//        this.txtBDegree.setEnabled(true);
//        this.txtDifferentNumberBooleanf.setEnabled(true);
//        this.spnAD.setEnabled(true);
//        this.spnInA.setEnabled(true);
//        this.spnNL.setEnabled(true);
//        this.spnBalance.setEnabled(true);
//        this.spnOEA.setEnabled(true);
//        this.btnOpenRecords.setEnabled(true);
//        //runGeneticAlgorithm(this.);
//    }
//public void runGeneticAlgorithm(int iDegree,int iNumberDiferentBooleanFunctions,String sConditions1,int heuristicAnI,int heuristicAD,int heuristicNL,int heuristicBalanced,int heuristicAI,javax.swing.JLabel lblNIterationTemp,javax.swing.JLabel lblNIterationRepTemp,javax.swing.JLabel lblIterationRepTemp,javax.swing.JLabel lblAverageNLTemp,javax.swing.JLabel lblAverageOSATemp,javax.swing.JLabel lblAverageADTemp,javax.swing.JLabel lblAverageWeightTemp,javax.swing.JLabel lblAverageAnITemp,HerramientaMaple2 eng)
//{
//        double iSameIterationToChange;
//        double dProbability=1;
//        /*
//        int d=(int)Math.floor(iDegree/2);
//        String sConditions1="wt(x):>:"+d+"||wt(x):==:"+d+"<-r";//"wt(x):>=:0<-r";
//        String sConditions2="";//&&&getWeight(x):>:"+d;//"&&&getWeight(x):>=:"+d+"||xx1:"+(d+2);
//        */
//        double wtBalanced=Math.pow(2,iDegree-1);
//        double maxNL=Math.pow(2, iDegree-1)-Math.pow(2, (iDegree/2)-1);
//        double maxAnnInm=Math.ceil(iDegree/2);
//        boolean withANF=true;
//        AnalisysBF abfItem =new AnalisysBF();
//        fileManagement flItem=new fileManagement();
//        HashMap hmBooleanFunction=new HashMap();
//        Calendar cItem=Calendar.getInstance();
//        String sNameFile="records"+cItem.getTimeInMillis()+".csv";
//        fileName=sNameFile;
//        String sBooleanFunction;
//        List<String> aThaos=abfItem.getListTrueTable(iDegree);
//        while(hmBooleanFunction.size()<iNumberDiferentBooleanFunctions)
//        {
//            sBooleanFunction=abfItem.createBooleanFunction(iDegree,aThaos, sConditions1, "", dProbability);
//            if(!hmBooleanFunction.containsKey(sBooleanFunction.hashCode()))
//            {
//                hmBooleanFunction.put(sBooleanFunction.hashCode(), sBooleanFunction);
//            }
//        }
//        List<BooleanFunctionInfo> comunity=new ArrayList<>();
//        HashMap<Integer,Integer> hmComunity=new HashMap();
//        for(Object key:hmBooleanFunction.keySet())
//        { 
//            String sItemBooleanFunction=hmBooleanFunction.get(key).toString(); 
//            BooleanFunctionInfo bfiItemInfo;
//             try{ 
//                bfiItemInfo = abfItem.getValueFitness(sItemBooleanFunction,iDegree,aThaos,wtBalanced,maxNL,maxAnnInm,withANF, heuristicAnI, heuristicAD, heuristicNL, heuristicBalanced, heuristicAI,eng);
//                //System.out.println(bfiItemInfo.getBooleanFunction()+"\n"+bfiItemInfo.getFNA());
//                comunity.add(bfiItemInfo);
//                hmComunity.put(bfiItemInfo.getBooleanFunction().hashCode(), 0);
//                } catch (MapleException ex) {
//                Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//        String sPrintScreen="";
//        try{
//            Collections.sort(comunity);
//        }catch(Exception ex)
//        {
//            int cont=0;
//        } 
//        double promedioNl=0;
//        double promedioAnI=0;
//        double promedioAI=0;
//        double promedioWeight=0;
//        double promedioAD=0;
//        for(BooleanFunctionInfo bfiItemInfo:comunity)
//        {
//            bfiItemInfo.setSimetric(abfItem.isSimetricFunction(bfiItemInfo.getBooleanFunction(),aThaos));
//            sPrintScreen+=GetStringInfo(bfiItemInfo);
//             promedioNl +=bfiItemInfo.getNL();
//             promedioAnI+=bfiItemInfo.getAnnhilatorInmunity();
//             promedioAI+=bfiItemInfo.getAbsoluteIndicator();
//             promedioWeight+=bfiItemInfo.getiWeith();
//             promedioAD+=bfiItemInfo.getAlgebraicDegree();
//        }
//         promedioNl=promedioNl/iNumberDiferentBooleanFunctions;
//         promedioAnI=promedioAnI/iNumberDiferentBooleanFunctions;
//         promedioAI=promedioAI/iNumberDiferentBooleanFunctions;
//         promedioWeight=promedioWeight/iNumberDiferentBooleanFunctions;
//         promedioAD=promedioAD/iNumberDiferentBooleanFunctions;
//         lblAverageNLTemp.setText(promedioNl+"");
//         lblAverageOSATemp.setText(promedioAI+"");
//         lblAverageADTemp.setText(promedioAD+"");
//         lblAverageAnITemp.setText(promedioAnI+"");
//         lblAverageWeightTemp.setText(promedioWeight+"");
//         //+"\nInmunidad Aniquilador:\t"+promedioAnI+"\nGrado Algebraico\t"+promedioAD+"\nOrden Estricto de Avalancha\t"+promedioAI+"\nPeso\t"+promedioWeight+"\n");
//         double m=Math.abs(maxNL-Math.floor(promedioNl));
//         iSameIterationToChange=(m%2==0)?(3*m/2):((3*m+1)/2);
//         lblNIterationRepTemp.setText((int)iSameIterationToChange+"");
//        try {
//                flItem.saveFile(sNameFile, "", sPrintScreen, false);
//            } catch (IOException ex) {
//                Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        //pool inicial;
//        //se ordenan para los mejores y se aparean en ese orden.
//        boolean canBetter=true;
//        int conti=0;
//        int contg=0;
//       
//        while(canBetter)
//        {
//            lblNIterationTemp.setText((conti+1)+"");
//             //System.out.println("*****  \n "+iSameIterationToChange+"***Iteration "+(conti+1));
//            int contChild=1;
//            List<String> lstChilds=abfItem.getChilds(comunity);
//            
//            for(String sItemBooleanFunction:lstChilds)
//            {
//                BooleanFunctionInfo bfiItemInfo;
//                boolean bItemExist=false;
//                int cont=0;
//                Calendar itemCalendar=Calendar.getInstance();
//                Random randItem=new Random(itemCalendar.getTimeInMillis());
//                while(!bItemExist)
//                {
//                        String sMutateFunction=abfItem.mutationBooleanFunctions(sItemBooleanFunction,abfItem.getWeight(sItemBooleanFunction),wtBalanced,randItem);
//                       // System.out.println((cont++)+" "+hmComunity.get(sMutateFunction.hashCode())+"::"+hmComunity.size());
//                        if(!hmComunity.containsKey(sMutateFunction.hashCode()))
//                        {
//                            bItemExist=true;
//                            try{
//                                bfiItemInfo=abfItem.getValueFitness(sMutateFunction,iDegree,aThaos,wtBalanced,maxNL,maxAnnInm,withANF, heuristicAnI, heuristicAD, heuristicNL, heuristicBalanced, heuristicAI,this.eng);
//                                comunity.add(bfiItemInfo);
//                                hmComunity.put(sMutateFunction.hashCode(),0);
//                                }catch (MapleException ex) {
//                                    Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
//                                }
//                        }
//                }
//            }
//            try{
//                Collections.sort(comunity);
//            }catch(Exception ex)
//            {
//                int cont=0;
//            }
//            //eliminamos a los mas debiles
//            int upperboundComunity=comunity.size();
//            for(int a=upperboundComunity-1; a>=iNumberDiferentBooleanFunctions;a--)
//            {
//                hmComunity.remove(comunity.get(a).getBooleanFunction().hashCode());
//                comunity.remove(comunity.get(a));
//            }
//            //comunity=comunityTemp;
//            sPrintScreen="\n Childs Iteracion "+(conti+1)+"\n";
//             promedioNl =promedioAnI=promedioAI=promedioWeight=promedioAD=0;
//            for(BooleanFunctionInfo bfiItemInfo:comunity)
//            {   
//                bfiItemInfo.setSimetric(abfItem.isSimetricFunction(bfiItemInfo.getBooleanFunction(),aThaos));
//                sPrintScreen+=GetStringInfo(bfiItemInfo);
//               //promedio +=bfiItemInfo.getNL();
//                 promedioNl +=bfiItemInfo.getNL();
//                    promedioAnI+=bfiItemInfo.getAnnhilatorInmunity();
//                    promedioAI+=bfiItemInfo.getAbsoluteIndicator();
//                    promedioWeight+=bfiItemInfo.getiWeith();
//                    promedioAD+=bfiItemInfo.getAlgebraicDegree();
//            } 
//            promedioNl=promedioNl/iNumberDiferentBooleanFunctions;
//            promedioAnI=promedioAnI/iNumberDiferentBooleanFunctions;
//            promedioAI=promedioAI/iNumberDiferentBooleanFunctions;
//            promedioWeight=promedioWeight/iNumberDiferentBooleanFunctions;
//            promedioAD=promedioAD/iNumberDiferentBooleanFunctions;
//            lblAverageNLTemp.setText(promedioNl+"");
//            lblAverageOSATemp.setText(promedioAI+"");
//            lblAverageADTemp.setText(promedioAD+"");
//            lblAverageAnITemp.setText(promedioAnI+"");
//            lblAverageWeightTemp.setText(promedioWeight+"");
//            try {
//                    flItem.saveFile(sNameFile, "", sPrintScreen, true);
//                } catch (IOException ex) {
//                    Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
//                }
//           
//            boolean isSameComunityToBack=isSameComunity(comunity);
//            contg=(isSameComunityToBack)?contg+1:0;
//            lblIterationRepTemp.setText(contg+"");
//            canBetter=(contg<iSameIterationToChange);
//            conti++;
//        }
//        
//        int pixelPCelda=25;
//        //Aniquiladores2 an=new Aniquiladores2();
//        if(jTable1==null)jTable1 = new javax.swing.JTable();
//        //List<String> trueTable=an.getListTrueTable(this.grado);
//        Object[][] thaoFuncion=new Object[iNumberDiferentBooleanFunctions][8];
//       
//        
//        for(int i=0;i<iNumberDiferentBooleanFunctions;i++)
//        {
//            BooleanFunctionInfo bfiItemInfo=comunity.get(i);
//            thaoFuncion[i][0]=i+1;
//            thaoFuncion[i][1]=bfiItemInfo.getFNA();
//            thaoFuncion[i][2]=bfiItemInfo.getBooleanFunction();
//            thaoFuncion[i][3]=bfiItemInfo.getiWeith();
//            thaoFuncion[i][4]=bfiItemInfo.getAlgebraicDegree();
//            thaoFuncion[i][5]=bfiItemInfo.getNL();
//            thaoFuncion[i][6]=bfiItemInfo.getAnnhilatorInmunity();
//            thaoFuncion[i][7]=bfiItemInfo.getAbsoluteIndicator();
//        }
//        
//        String[] aTitles="i|FNA|Función|Peso|Grado|NL|InAn|InAbs".split("\\|");
//       
//       
//         jTable1.setModel(new javax.swing.table.DefaultTableModel(
//           thaoFuncion,aTitles
//        ){ 
//            /*public boolean isCellEditable(int rowIndex, int columnIndex) {
//                return canEdit [columnIndex];
//            }*/
//        });
//        panelArea.setViewportView(jTable1);
//        //System.out.println("*****  \n "+iSameIterationToChange+"***Iteration "+(conti));
//    }
    static private boolean isSameComunity(List<BooleanFunctionInfo> comunity)
    {
        boolean bResult=true;
        if(comunityTemp!=null)
        {
        for(int i=0;i<comunity.size();i++)
        {
            System.out.println(comunity.get(i).getHashCodeBooleanFunction()+" "+comunityTemp.get(i).getHashCodeBooleanFunction());
            bResult=bResult&&(comunity.get(i).getFitnessValue()==comunityTemp.get(i).getFitnessValue());
        }
        }else
        {
            bResult=false;
        } 
        comunityTemp=new ArrayList();
        for(BooleanFunctionInfo bfiItemInfo:comunity)
        {
            comunityTemp.add(bfiItemInfo);
        }
        return bResult;
    }
    static private String GetStringInfo(BooleanFunctionInfo bfiItemInfo)
        {
            String sResult="";
            String sItemBooleanFunction=bfiItemInfo.getBooleanFunction();
            sResult+="FV,"+bfiItemInfo.getFitnessValue();
             /*******/
            double iWeith=bfiItemInfo.getiWeith();
            String sWeith=(iWeith+"");
            sResult+=",WT,"+sWeith;
            ////
            //NL//
            String sNL=bfiItemInfo.getNL()+"";
            sResult+=",NL,"+sNL;
             ////
            //Balancedness//
            String sBalancedness=((bfiItemInfo.isBalanced())?"1":"0");
            sResult+=",Bal,"+(sBalancedness.equals("0")?"No":"Si");
            ////
            //simetria//
            String sSimetria=bfiItemInfo.isSimetric()?"1":"0";//((abfItem.isSimetricFunction(sItemBooleanFunction,aThaos))?"1":"0");
            sResult+=",Sim,"+(sSimetria.equals("0")?"No":"Si");
            ////
            //Indicador Absoluto//
            String sIndicadorAbsoluto=bfiItemInfo.getAbsoluteIndicator()+"";
            sResult+=",AI,"+sIndicadorAbsoluto;
            ////
            //ANF//
            //String sFNA=abfItem.getANF(iDegree,bfiItemInfo.getOnSet(),false);
                //sResult+=(sFNA + "\n");
                ////
                //Algebraic degree//
            String sgradoAlgebraico=bfiItemInfo.getAlgebraicDegree()+"";
            sResult+=",AD,"+sgradoAlgebraico;
                //endTimeWithOutAnihilator=System.currentTimeMillis();
                //System.out.print(sgradoAlgebraico+"\t");
                ////
            //Anihilator inmunity//
            double dAnnInm=bfiItemInfo.getAnnhilatorInmunity();
            sResult+=",InAN,"+dAnnInm;
            sResult+=",f"+sItemBooleanFunction;
            sResult+="\n";
            return sResult;
            
        }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnValidar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField txtConditions;
    private javax.swing.JTextField txtDegree;
    private javax.swing.JTextArea txtFuncionBooleana;
    // End of variables declaration//GEN-END:variables
//public class myThreadF{
//        public myThreadF(HerramientaMaple2 eng)//HerramientaMaple parameter
//        {
//            //HerramientaMapleLocal=parameter;  
//          /*  try {
//                //MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true);
//                new HerramientaMaple();
//            } catch (MapleException ex) {
//                Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
//            }*/
//        }
//
//        public void run() {
//         
//             runAnalizer(eng);
//        }
//        public void runAnalizer(final HerramientaMaple2 eng)
//     {
//     //this.setVisible(true);
//        
//     Thread worker = new Thread() {
//         
//     @Override
//     public void run() {   
//        /*  try {
//             //new HerramientaMaple2();
//            
//              eng = new HerramientaMaple2();
//         } catch (MapleException ex) {
//             Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
//         }*/
//             initGeneticAlgorithm(eng);
//            this.stop();
//       
//     }
//     };
//     worker.start();
//     }
//
//    }
//public class myThreadA {
//
//        HerramientaMaple2 eng2;
//
//        public myThreadA()//HerramientaMaple parameter
//        {
//            //HerramientaMapleLocal=parameter;
//           
//        }
//
//        public void run() {
//           
//                //MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true);
//                 Thread worker = new Thread() {
//         
//                    @Override
//                    public void run() {   
//                        try {
//                            if(eng==null)eng=new HerramientaMaple2();
//                            /*  try {
//                            //new HerramientaMaple2();
//                            
//                            eng = new HerramientaMaple2();
//                            } catch (MapleException ex) {
//                            Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
//                            }*/
//                            // initGeneticAlgorithm(eng);
//                            analizer(eng);
//                            this.stop();
//                        } catch (MapleException ex) {
//                            Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                    };
//                    worker.start();
//        }
//
//    }
//private void enableChk(boolean active)
//{
//        this.chkBalanceada.setEnabled(active);
//        this.chkFNA.setEnabled(active);
//        this.chkGrado.setEnabled(active);
//        this.chkIndicadorAbsoluto.setEnabled(active);
//        this.chkInmunidad.setEnabled(active);
//        this.chkNL.setEnabled(active);
//        this.chkPeso.setEnabled(active);
//        this.chkSimetrica.setEnabled(active);
//}
//private void activeChk(boolean active)
//{
//        this.chkBalanceada.setSelected(active);
//        this.chkFNA.setSelected(active);
//        this.chkGrado.setSelected(active);
//        this.chkIndicadorAbsoluto.setSelected(active);
//        this.chkInmunidad.setSelected(active);
//        this.chkNL.setSelected(active);
//        this.chkPeso.setSelected(active);
//        this.chkSimetrica.setSelected(active);
//}
//private void analizer(HerramientaMaple2 eng) throws MapleException {
//        
//        enableChk(false);
//        String funcion=this.txtABF.getText();
//        for(int i=this.txtABF.getText().length();i<Math.pow(2, Integer.parseInt(this.lblAOrden.getText()));i++)
//        {
//            funcion+="0";
//        }
//        long lStartTime;
//        long lEndTime;
//        int iAdvanceCounter = 0;
//        double dItemsNumber = Math.pow(2, Integer.parseInt(this.lblAOrden.getText()));
//        double dIncrement = 10000 / (dItemsNumber);
//        double dPercent = 10000.0 * 0.01;
//        String sComandsMaple = "";
//        String sComandsMaplePlus1 = "";
//        btnAnalizar.setEnabled(false);
//        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        AnalisysBFLocal abfItem = new AnalisysBFLocal();
//
//        
//        List<List> lstOnSet=abfItem.getListIntOnSet(funcion);
//        List<List> lstOnSetFplus1=abfItem.getListIntOnSet(funcion,true);
//        List<Integer> lstWalshSpectra=abfItem.getWalshSpectra(funcion);
//        List<String> lstThaos = abfItem.getListTrueTable(Integer.parseInt(this.lblAOrden.getText()));
//        String sAlgebraicDegree="";
//        String sTimesAD="";
//        String sNL="";
//        String sTimeNl="";
//        String sWeight="";
//        String stimeWeight="";
//        String sBalancedness="";
//        String timeBalancedness="";
//        String sSimetry="";
//        String sTimeSimetry="";
//        String sAbsolutIndicator="";
//        String stimeIndicatorAbsolute="";
//        String sAniquilador="";
//        String sTimesAI="";
//        
//        /*
//         lStartTime = System.currentTimeMillis();
//         lEndTime = System.currentTimeMillis();
//         lEndTime-lStartTime;
//         */
//        //Weight//
//        int iWeight=abfItem.getWeight(funcion);
//        if(this.chkPeso.isSelected())
//        {
//            lStartTime = System.currentTimeMillis();
//            //iWeight = abfItem.getWeight(funcion);
//            lEndTime = System.currentTimeMillis();
//            stimeWeight = (lEndTime - lStartTime) + "";
//            sWeight = (iWeight + ":" + funcion.length());
//            lblWeight.setText(sWeight);
//            this.lblTimeWeight.setText(stimeWeight + " ms");
//            iAdvanceCounter += 6 * dPercent * dIncrement;
//            pbProperties.setValue(iAdvanceCounter);
//        }
//        ////
//        //Walsh Specktra//
//        if(this.chkNL.isSelected())
//        {
//        lStartTime = System.currentTimeMillis();
//        sNL = abfItem.getNL(lstWalshSpectra) + "";
//        lEndTime = System.currentTimeMillis();
//        sTimeNl = (lEndTime - lStartTime) + "";
//        lblNL.setText(sNL);
//        lblTimeNL.setText(sTimeNl + " ms");
//        iAdvanceCounter += 10 * dPercent * dIncrement;
//        pbProperties.setValue(iAdvanceCounter);
//        }
//        ////
//        //Balancedness//
//        if(this.chkBalanceada.isSelected()){
//        lStartTime = System.currentTimeMillis();
//        sBalancedness = ((abfItem.isBalanced(lstWalshSpectra)) ? "1" : "0");
//        lEndTime = System.currentTimeMillis();
//        timeBalancedness = (lEndTime - lStartTime) + "";
//        lblBalancedness.setText((sBalancedness.equals("0") ? "No" : "Si"));
//        this.lblTimeBalancedness.setText(timeBalancedness + " ms");
//        iAdvanceCounter += 3 * dPercent * dIncrement;
//        pbProperties.setValue(iAdvanceCounter);
//        }
//        ////
//        //simetry//
//        if(this.chkSimetrica.isSelected()){
//        lStartTime = System.currentTimeMillis();
//       
//        sSimetry = ((abfItem.isSimetricFunction(funcion, lstThaos)) ? "1" : "0");
//        lEndTime = System.currentTimeMillis();
//        sTimeSimetry = (lEndTime - lStartTime) + "";
//        lblSimetry.setText((sSimetry.equals("0") ? "No" : "Si"));
//        lblTimeSimetry.setText(sTimeSimetry + " ms");
//        iAdvanceCounter += 11 * dPercent * dIncrement;
//        //30
//        pbProperties.setValue(iAdvanceCounter);
//        }
//        ////
//
//        //Indicador Absoluto//
//        if(this.chkIndicadorAbsoluto.isSelected()){
//        lStartTime = System.currentTimeMillis();
//        HashMap hmTahoFuncion = new HashMap();
//        for (int i = 0; i < lstThaos.size(); i++) {
//            String sFv = funcion.substring(i, i + 1);
//            if (sFv.equals("1")) {
//                hmTahoFuncion.put(lstThaos.get(i), Integer.parseInt(sFv));
//            }
//        }
//        List<Integer> lstCorrelationCoeffient = new ArrayList();
//        double dSubIncrement = (30 * dPercent * dIncrement) / lstThaos.size();
//        for (int i = 0; i < lstThaos.size(); i++) {
//            lstCorrelationCoeffient.add(abfItem.autoCorrelationCoeffient(lstThaos.get(i), funcion, lstThaos, hmTahoFuncion));
//            pbProperties.setValue(iAdvanceCounter + (int) (dSubIncrement * (i + 1)));
//        }
//        sAbsolutIndicator = abfItem.getMaxVAIntArray(lstCorrelationCoeffient) + "";
//        lEndTime = System.currentTimeMillis();
//        stimeIndicatorAbsolute = (lEndTime - lStartTime) + "";
//        lblIndicator.setText(sAbsolutIndicator);
//        lblTimeIndicator.setText(stimeIndicatorAbsolute + " ms");
//        iAdvanceCounter += 30 * dPercent * dIncrement;
//        pbProperties.setValue(iAdvanceCounter);
//        }
//        ////
//        
//        //ANF && AD//   
//        String sANF="-";
//        long lAD=0;
//        lStartTime = System.currentTimeMillis();
//        if(this.chkFNA.isSelected() && this.chkGrado.isSelected())
//        {
//        
//      
//       
//           if(iWeight%2==1)
//           {
//               sANF=abfItem.getANF(funcion,Integer.parseInt(this.lblAOrden.getText()));
//               lAD=Integer.parseInt(this.lblAOrden.getText());
//           }else{
//           Object[] aResultANF=abfItem.getANFAndAD(funcion,Integer.parseInt(this.lblAOrden.getText()));
//           lAD=Long.parseLong(aResultANF[1]+"");
//           sANF=aResultANF[0]+"";
//           }
//        }else{
//            if(this.chkFNA.isSelected())
//            {
//                sANF=abfItem.getANF(funcion,Integer.parseInt(this.lblAOrden.getText()));
//            }else{
//                  lAD=(iWeight%2==1)?Integer.parseInt(this.lblAOrden.getText()):abfItem.getAD(funcion,Integer.parseInt(this.lblAOrden.getText()));
//            }
//        }
//        
//        lEndTime = System.currentTimeMillis();
//        String sTimeANF = (lEndTime - lStartTime) + "";
//        iAdvanceCounter += 20 * dPercent * dIncrement;
//        txtANF.setText(sANF);
//        lblTimeANF.setText(sTimeANF + " ms");
//        iAdvanceCounter += 20 * dIncrement;
//        pbProperties.setValue(iAdvanceCounter);
//        ////
//        
//        //Algebraic degree//
//        if(this.chkGrado.isSelected()){
//        sAlgebraicDegree = lAD+"";
//        sTimesAD = ((iWeight%2==1)?0:sTimeANF) + "";
//        lblDegree.setText(sAlgebraicDegree);
//        lblTimeAD.setText(sTimesAD + " ms");
//        iAdvanceCounter += 5 * dPercent * dIncrement;
//        pbProperties.setValue(iAdvanceCounter);
//        }
//        ////     
//        //Anihilator inmunity//
//        if(this.chkInmunidad.isSelected())
//        {
//            lStartTime = System.currentTimeMillis();
//            sAniquilador = "0";
//            //List<String> lstGenericPolinomy = abfItem.getGenericFuction(Integer.parseInt(this.lblAOrden.getText()), (int) Math.floor(Integer.parseInt(this.lblAOrden.getText()) / 2.0));
//            //boolean haveAnhilator;
//            //String sHaveAnhilator;
//            double iAnnInm=0;
//              try {
//                    //iAnnInm= abfItem.getMaxAnnhilatorInmunity(iDegree, lstOnSet, lstOnSetFplus1);
//                    //iAnnInm= abfItem.getMaxAnnhilatorInmunity(iDegree, lstOnSet, lstOnSetFplus1);
//                    iAnnInm= abfItem.getMaxAnnhilatorInmunity(Integer.parseInt(this.lblAOrden.getText()), lstOnSet, lstOnSetFplus1,eng);
//                }catch (MapleException ex) {
//                    iAnnInm = -1;
//                txtANF.setText(ex.getMessage());
//                } catch (TimeoutException ex) {
//                Logger.getLogger(MValidateBF.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            lEndTime = System.currentTimeMillis();
//            sTimesAI = (lEndTime - lStartTime) + "";
//            lblInmunidad.setText(sAniquilador.equals("-") ? "No Disponible" : iAnnInm+"");
//            lblTimeAI.setText(sTimesAI + " ms");
//            iAdvanceCounter += 15 * dPercent * dIncrement;
//            pbProperties.setValue(iAdvanceCounter);
//        }
//        ////  
//        //funcion booleana, Orden,ANF,Tiempo ANF,Grado Algebraico,Tiempo ANF,No-Linalidad,Tiempo NL,Weight,Tiempo Weight,Balanceo,Tiempo Balanceo,Simetrica,Tiempo Simetry,Indicador Absoluto, Tiempo Indicador Absoluto,Inmunidad de Aniquilador,Tiempo Inmunidad de Aniquilador 
//        StringResults = funcion + "," + Integer.parseInt(this.lblAOrden.getText()) + "," + sANF + "," + sTimeANF + "," + sAlgebraicDegree + "," + sTimesAD + "," + sNL + "," + sTimeNl + "," + sWeight + "," + stimeWeight + "," + sBalancedness + "," + timeBalancedness + "," + sSimetry + "," + sTimeSimetry + "," + sAbsolutIndicator + "," + stimeIndicatorAbsolute + "," + sAniquilador + "," + sTimesAI + "\n";
//        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//       
//        btnGuardar.setEnabled(true);
//        //btnValidar.setEnabled(true);
//        enableChk(true);
//        try {
//            abfItem.saveWalshSpectra(lstWalshSpectra, "WalshSpectra.csv");
//            abfItem.saveEquationsSystemComandsMaple(sComandsMaple + sComandsMaplePlus1, "EquationsSystemComandsMaple.txt");
//        } catch (IOException ex) {
//            Logger.getLogger(MValidateBF.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        //Almacenar los archivos de maple y walsh spectra
//    }

}
