package BooleanFunctionsTT;

import booleantools.AnalisysBF;
import booleantools.BooleanFunctionInfo;
import booleantools.BooleanToolsMain;
import booleantools.fileManagement;
import com.maplesoft.externalcall.MapleException;
import java.awt.Desktop;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import utileria.Maple.HerramientaMaple2;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author william
 */
public class findBF extends javax.swing.JDialog {

    /**
     * Creates new form findBF
     */
      private static List<BooleanFunctionInfo> comunityTemp;
         javax.swing.JTable jTable1;
          String fileName="";
          
    public findBF(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         this.spnAD.setValue(20);
        this.spnBalance.setValue(20);
        this.spnInA.setValue(20);
        this.spnOEA.setValue(20);
        this.spnNL.setValue(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBDegree = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDifferentNumberBooleanf = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        chkRandom = new javax.swing.JRadioButton();
        chkNotRandom = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCM = new javax.swing.JTextPane();
        btnHelp = new javax.swing.JButton();
        spnNL = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        spnInA = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        spnAD = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        spnOEA = new javax.swing.JSpinner();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel17 = new javax.swing.JLabel();
        spnBalance = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        btnFind = new javax.swing.JButton();
        pnlStatus = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lblNIteration = new javax.swing.JLabel();
        lblNGRPP = new javax.swing.JLabel();
        lblGR = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        lblSumaryNL = new javax.swing.JLabel();
        lblSumaryOEA = new javax.swing.JLabel();
        lblSumaryAD = new javax.swing.JLabel();
        lblSumaryInA = new javax.swing.JLabel();
        lblSumaryWeith = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel31 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        panelArea = new javax.swing.JScrollPane();
        btnOpenRecords = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setMinimumSize(new java.awt.Dimension(580, 344));

        jLabel5.setText("Orden");

        txtBDegree.setText("0");
        txtBDegree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBDegreeKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtBDegree);

        jLabel6.setText("Numero de funciones diferentes");

        txtDifferentNumberBooleanf.setText("0");
        txtDifferentNumberBooleanf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDifferentNumberBooleanfKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(txtDifferentNumberBooleanf);

        jLabel7.setText("Creacion Inicial");

        chkRandom.setSelected(true);
        chkRandom.setText("Aleatoria");
        chkRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRandomActionPerformed(evt);
            }
        });

        chkNotRandom.setText("Metodo de Construcci√≥n");
        chkNotRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNotRandomActionPerformed(evt);
            }
        });

        txtCM.setEnabled(false);
        jScrollPane4.setViewportView(txtCM);

        btnHelp.setText("?");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        spnNL.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnNLStateChanged(evt);
            }
        });

        jLabel8.setText("No Linealidad");

        jLabel9.setText("Inmunidad Aniquilador");

        jLabel10.setText("Prioridad de las  Propiedades");

        jLabel11.setText("%");

        jLabel12.setText("%");

        spnInA.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnInAStateChanged(evt);
            }
        });

        jLabel13.setText("Grado Algebraico");

        spnAD.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnADStateChanged(evt);
            }
        });

        jLabel14.setText("%");

        jLabel15.setText("Orden Estricto de Avalancha");

        spnOEA.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnOEAStateChanged(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel17.setText("Balanceo");

        spnBalance.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnBalanceStateChanged(evt);
            }
        });

        jLabel18.setText("%");

        btnFind.setText("Comenzar");
        btnFind.setEnabled(false);
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        jLabel19.setText("Iteracion");

        jLabel20.setText("GRPP");

        jLabel21.setText("GR");

        lblNIteration.setText("0");

        lblNGRPP.setText("0");

        lblGR.setText("0");

        lblStatus.setText(".");

        jLabel22.setText("Promedios de Generacion");

        jLabel23.setText("No Linealidad");

        jLabel24.setText("Inmunidad Aniquilador");

        jLabel25.setText("Grado Algebraico");

        jLabel26.setText("Orden Estricto de A.");

        jLabel27.setText("Peso");

        lblSumaryNL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSumaryNL.setText("0");

        lblSumaryOEA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSumaryOEA.setText("0");

        lblSumaryAD.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSumaryAD.setText("0");

        lblSumaryInA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSumaryInA.setText("0");

        lblSumaryWeith.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSumaryWeith.setText("0");

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel31.setText("Algoritmo Genetico");

        javax.swing.GroupLayout pnlStatusLayout = new javax.swing.GroupLayout(pnlStatus);
        pnlStatus.setLayout(pnlStatusLayout);
        pnlStatusLayout.setHorizontalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStatusLayout.createSequentialGroup()
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addGroup(pnlStatusLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel19))
                                .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlStatusLayout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(lblGR, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblNIteration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblNGRPP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlStatusLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlStatusLayout.createSequentialGroup()
                                .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlStatusLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel26)
                                            .addComponent(jLabel25)))
                                    .addGroup(pnlStatusLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblStatus)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSumaryNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblSumaryAD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblSumaryOEA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(10, 10, 10)
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel27))
                        .addGap(18, 18, 18)
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSumaryWeith, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSumaryInA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator5))
                .addContainerGap())
        );
        pnlStatusLayout.setVerticalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStatusLayout.createSequentialGroup()
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(lblNIteration)
                            .addComponent(lblStatus)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(lblSumaryNL)
                            .addComponent(lblSumaryInA))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel20)
                                .addComponent(lblNGRPP)
                                .addComponent(jLabel27)
                                .addComponent(lblSumaryOEA)
                                .addComponent(lblSumaryWeith)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(lblGR)
                            .addComponent(jLabel25)
                            .addComponent(lblSumaryAD))
                        .addContainerGap())
                    .addGroup(pnlStatusLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jSeparator4))))
        );

        jLabel28.setText("Total");

        lblTotal.setText("0");

        jLabel29.setText("%");

        jLabel30.setText("%");

        btnOpenRecords.setText("Abrir Registros");
        btnOpenRecords.setEnabled(false);
        btnOpenRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenRecordsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHelp))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chkNotRandom)
                                        .addComponent(chkRandom))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addGap(7, 7, 7)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spnNL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel11))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(spnAD, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel14))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(spnInA, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel12))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel17))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(spnBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel18))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(spnOEA, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel29))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel30)))))
                                .addGap(65, 65, 65))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOpenRecords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelArea)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(spnNL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12)
                            .addComponent(spnInA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(spnAD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(spnOEA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(17, 17, 17)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel28)
                                        .addComponent(lblTotal))))
                            .addComponent(spnBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel7)
                                .addGap(56, 56, 56))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkRandom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkNotRandom)
                                .addGap(8, 8, 8)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnHelp, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnFind)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpenRecords)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelArea, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 688, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRandomActionPerformed
        // TODO add your handling code here:
        if(this.chkRandom.isSelected())
        {
            this.txtCM.setEnabled(false);
            this.btnHelp.setEnabled(false);
        }
    }//GEN-LAST:event_chkRandomActionPerformed

    private void chkNotRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNotRandomActionPerformed
        // TODO add your handling code here:
        if(this.chkNotRandom.isSelected())
        {
            this.txtCM.setEnabled(true);
            this.btnHelp.setEnabled(true);
        }
    }//GEN-LAST:event_chkNotRandomActionPerformed

    private void spnNLStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnNLStateChanged
        // TODO add your handling code here:
        this.lblTotal.setText(((int)this.spnAD.getValue()+(int)this.spnBalance.getValue()+(int)this.spnInA.getValue()+(int)this.spnNL.getValue()+(int)this.spnOEA.getValue())+"");
    }//GEN-LAST:event_spnNLStateChanged

    private void spnInAStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnInAStateChanged
        // TODO add your handling code here:
        this.lblTotal.setText(((int)this.spnAD.getValue()+(int)this.spnBalance.getValue()+(int)this.spnInA.getValue()+(int)this.spnNL.getValue()+(int)this.spnOEA.getValue())+"");

    }//GEN-LAST:event_spnInAStateChanged

    private void spnADStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnADStateChanged
        // TODO add your handling code here:
        this.lblTotal.setText(((int)this.spnAD.getValue()+(int)this.spnBalance.getValue()+(int)this.spnInA.getValue()+(int)this.spnNL.getValue()+(int)this.spnOEA.getValue())+"");

    }//GEN-LAST:event_spnADStateChanged

    private void spnOEAStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnOEAStateChanged
        // TODO add your handling code here:
        this.lblTotal.setText(((int)this.spnAD.getValue()+(int)this.spnBalance.getValue()+(int)this.spnInA.getValue()+(int)this.spnNL.getValue()+(int)this.spnOEA.getValue())+"");

    }//GEN-LAST:event_spnOEAStateChanged

    private void spnBalanceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnBalanceStateChanged
        // TODO add your handling code here:
        this.lblTotal.setText(((int)this.spnAD.getValue()+(int)this.spnBalance.getValue()+(int)this.spnInA.getValue()+(int)this.spnNL.getValue()+(int)this.spnOEA.getValue())+"");

    }//GEN-LAST:event_spnBalanceStateChanged
    public void initGeneticAlgorithm()
    {
        this.pnlStatus.setVisible(true);
        this.btnFind.setEnabled(false);
        if(this.chkNotRandom.isSelected())
        {
            this.txtCM.setEnabled(false);
            this.btnHelp.setEnabled(false);
            this.chkRandom.setEnabled(false);
        }
        this.btnOpenRecords.setEnabled(false);
        this.txtBDegree.setEnabled(false);
        this.txtDifferentNumberBooleanf.setEnabled(false);
        this.spnAD.setEnabled(false);
        this.spnInA.setEnabled(false);
        this.spnNL.setEnabled(false);
        this.spnBalance.setEnabled(false);
        this.spnOEA.setEnabled(false);
        int iDegree=Integer.parseInt(this.txtBDegree.getText());
        int iDifferentNBF=Integer.parseInt(this.txtDifferentNumberBooleanf.getText());
        String sConditions1="wt(x):>=:0<-r";
        if(this.chkNotRandom.isSelected())
        {
            sConditions1=(this.txtCM.getText().equals(""))?sConditions1:this.txtCM.getText();
        }
        int heuristicAnI=(int)(this.spnInA.getValue());
        int heuristicAD=(int)(this.spnAD.getValue());
        int heuristicNL=(int)(this.spnNL.getValue());
        int heuristicBalanced=(int)(this.spnBalance.getValue());
        int heuristicAI=(int)(this.spnOEA.getValue());
        
        runGeneticAlgorithm( iDegree, iDifferentNBF, sConditions1, heuristicAnI, heuristicAD, heuristicNL, heuristicBalanced, heuristicAI,lblNIteration, lblNGRPP,lblGR,lblSumaryNL,lblSumaryOEA,lblSumaryAD,lblSumaryWeith,lblSumaryInA);
        
        this.btnFind.setEnabled(true);
        if(this.chkNotRandom.isSelected())
        {
            this.txtCM.setEnabled(true);
            this.btnHelp.setEnabled(true);
            this.chkRandom.setEnabled(true);
        }
        this.txtBDegree.setEnabled(true);
        this.txtDifferentNumberBooleanf.setEnabled(true);
        this.spnAD.setEnabled(true);
        this.spnInA.setEnabled(true);
        this.spnNL.setEnabled(true);
        this.spnBalance.setEnabled(true);
        this.spnOEA.setEnabled(true);
        this.btnOpenRecords.setEnabled(true);
        //runGeneticAlgorithm(this.);
    }
public void runGeneticAlgorithm(int iDegree,int iNumberDiferentBooleanFunctions,String sConditions1,int heuristicAnI,int heuristicAD,int heuristicNL,int heuristicBalanced,int heuristicAI,javax.swing.JLabel lblNIterationTemp,javax.swing.JLabel lblNIterationRepTemp,javax.swing.JLabel lblIterationRepTemp,javax.swing.JLabel lblAverageNLTemp,javax.swing.JLabel lblAverageOSATemp,javax.swing.JLabel lblAverageADTemp,javax.swing.JLabel lblAverageWeightTemp,javax.swing.JLabel lblAverageAnITemp )
{
        double iSameIterationToChange;
        double dProbability=1;
        /*
        int d=(int)Math.floor(iDegree/2);
        String sConditions1="wt(x):>:"+d+"||wt(x):==:"+d+"<-r";//"wt(x):>=:0<-r";
        String sConditions2="";//&&&getWeight(x):>:"+d;//"&&&getWeight(x):>=:"+d+"||xx1:"+(d+2);
        */
        double wtBalanced=Math.pow(2,iDegree-1);
        double maxNL=Math.pow(2, iDegree-1)-Math.pow(2, (iDegree/2)-1);
        double maxAnnInm=Math.ceil(iDegree/2);
        boolean withANF=true;
        AnalisysBF abfItem =new AnalisysBF();
        fileManagement flItem=new fileManagement();
        HashMap hmBooleanFunction=new HashMap();
        Calendar cItem=Calendar.getInstance();
        String sNameFile="records"+cItem.getTimeInMillis()+".csv";
        fileName=sNameFile;
        String sBooleanFunction;
        List<String> aThaos=abfItem.getListTrueTable(iDegree);
        while(hmBooleanFunction.size()<iNumberDiferentBooleanFunctions)
        {
            sBooleanFunction=abfItem.createBooleanFunction(iDegree,aThaos, sConditions1, "", dProbability);
            if(!hmBooleanFunction.containsKey(sBooleanFunction.hashCode()))
            {
                hmBooleanFunction.put(sBooleanFunction.hashCode(), sBooleanFunction);
            }
        }
        List<BooleanFunctionInfo> comunity=new ArrayList<>();
        HashMap<Integer,Integer> hmComunity=new HashMap();
        for(Object key:hmBooleanFunction.keySet())
        { 
            String sItemBooleanFunction=hmBooleanFunction.get(key).toString(); 
            BooleanFunctionInfo bfiItemInfo;
             try{ 
                bfiItemInfo = abfItem.getValueFitness(sItemBooleanFunction,iDegree,aThaos,wtBalanced,maxNL,maxAnnInm,withANF, heuristicAnI, heuristicAD, heuristicNL, heuristicBalanced, heuristicAI);
                //System.out.println(bfiItemInfo.getBooleanFunction()+"\n"+bfiItemInfo.getFNA());
                comunity.add(bfiItemInfo);
                hmComunity.put(bfiItemInfo.getBooleanFunction().hashCode(), 0);
                } catch (MapleException ex) {
                Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        String sPrintScreen="";
        try{
            Collections.sort(comunity);
        }catch(Exception ex)
        {
            int cont=0;
        } 
        double promedioNl=0;
        double promedioAnI=0;
        double promedioAI=0;
        double promedioWeight=0;
        double promedioAD=0;
        for(BooleanFunctionInfo bfiItemInfo:comunity)
        {
            bfiItemInfo.setSimetric(abfItem.isSimetricFunction(bfiItemInfo.getBooleanFunction(),aThaos));
            sPrintScreen+=GetStringInfo(bfiItemInfo);
             promedioNl +=bfiItemInfo.getNL();
             promedioAnI+=bfiItemInfo.getAnnhilatorInmunity();
             promedioAI+=bfiItemInfo.getAbsoluteIndicator();
             promedioWeight+=bfiItemInfo.getiWeith();
             promedioAD+=bfiItemInfo.getAlgebraicDegree();
        }
         promedioNl=promedioNl/iNumberDiferentBooleanFunctions;
         promedioAnI=promedioAnI/iNumberDiferentBooleanFunctions;
         promedioAI=promedioAI/iNumberDiferentBooleanFunctions;
         promedioWeight=promedioWeight/iNumberDiferentBooleanFunctions;
         promedioAD=promedioAD/iNumberDiferentBooleanFunctions;
         lblAverageNLTemp.setText(promedioNl+"");
         lblAverageOSATemp.setText(promedioAI+"");
         lblAverageADTemp.setText(promedioAD+"");
         lblAverageAnITemp.setText(promedioAnI+"");
         lblAverageWeightTemp.setText(promedioWeight+"");
         //+"\nInmunidad Aniquilador:\t"+promedioAnI+"\nGrado Algebraico\t"+promedioAD+"\nOrden Estricto de Avalancha\t"+promedioAI+"\nPeso\t"+promedioWeight+"\n");
         double m=Math.abs(maxNL-Math.floor(promedioNl));
         iSameIterationToChange=(m%2==0)?(3*m/2):((3*m+1)/2);
         lblNIterationRepTemp.setText((int)iSameIterationToChange+"");
        try {
                flItem.saveFile(sNameFile, "", sPrintScreen, false);
            } catch (IOException ex) {
                Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        //pool inicial;
        //se ordenan para los mejores y se aparean en ese orden.
        boolean canBetter=true;
        int conti=0;
        int contg=0;
       
        while(canBetter)
        {
            lblNIterationTemp.setText((conti+1)+"");
             //System.out.println("*****  \n "+iSameIterationToChange+"***Iteration "+(conti+1));
            int contChild=1;
            List<String> lstChilds=abfItem.getChilds(comunity);
            
            for(String sItemBooleanFunction:lstChilds)
            {
                BooleanFunctionInfo bfiItemInfo;
                boolean bItemExist=false;
                int cont=0;
                Calendar itemCalendar=Calendar.getInstance();
                Random randItem=new Random(itemCalendar.getTimeInMillis());
                while(!bItemExist)
                {
                        String sMutateFunction=abfItem.mutationBooleanFunctions(sItemBooleanFunction,abfItem.getWeight(sItemBooleanFunction),wtBalanced,randItem,(int)m);
                       // System.out.println((cont++)+" "+hmComunity.get(sMutateFunction.hashCode())+"::"+hmComunity.size());
                        if(!hmComunity.containsKey(sMutateFunction.hashCode()))
                        {
                            bItemExist=true;
                            try{
                                bfiItemInfo=abfItem.getValueFitness(sMutateFunction,iDegree,aThaos,wtBalanced,maxNL,maxAnnInm,withANF, heuristicAnI, heuristicAD, heuristicNL, heuristicBalanced, heuristicAI);
                                comunity.add(bfiItemInfo);
                                hmComunity.put(sMutateFunction.hashCode(),0);
                                }catch (MapleException ex) {
                                    Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        }
                }
            }
            try{
                Collections.sort(comunity);
            }catch(Exception ex)
            {
                int cont=0;
            }
            //eliminamos a los mas debiles
            int upperboundComunity=comunity.size();
            for(int a=upperboundComunity-1; a>=iNumberDiferentBooleanFunctions;a--)
            {
                hmComunity.remove(comunity.get(a).getBooleanFunction().hashCode());
                comunity.remove(comunity.get(a));
            }
            //comunity=comunityTemp;
            sPrintScreen="\n Childs Iteracion "+(conti+1)+"\n";
             promedioNl =promedioAnI=promedioAI=promedioWeight=promedioAD=0;
            for(BooleanFunctionInfo bfiItemInfo:comunity)
            {   
                bfiItemInfo.setSimetric(abfItem.isSimetricFunction(bfiItemInfo.getBooleanFunction(),aThaos));
                sPrintScreen+=GetStringInfo(bfiItemInfo);
               //promedio +=bfiItemInfo.getNL();
                 promedioNl +=bfiItemInfo.getNL();
                    promedioAnI+=bfiItemInfo.getAnnhilatorInmunity();
                    promedioAI+=bfiItemInfo.getAbsoluteIndicator();
                    promedioWeight+=bfiItemInfo.getiWeith();
                    promedioAD+=bfiItemInfo.getAlgebraicDegree();
            } 
            promedioNl=promedioNl/iNumberDiferentBooleanFunctions;
            promedioAnI=promedioAnI/iNumberDiferentBooleanFunctions;
            promedioAI=promedioAI/iNumberDiferentBooleanFunctions;
            promedioWeight=promedioWeight/iNumberDiferentBooleanFunctions;
            promedioAD=promedioAD/iNumberDiferentBooleanFunctions;
            lblAverageNLTemp.setText(promedioNl+"");
            lblAverageOSATemp.setText(promedioAI+"");
            lblAverageADTemp.setText(promedioAD+"");
            lblAverageAnITemp.setText(promedioAnI+"");
            lblAverageWeightTemp.setText(promedioWeight+"");
            try {
                    flItem.saveFile(sNameFile, "", sPrintScreen, true);
                } catch (IOException ex) {
                    Logger.getLogger(BooleanToolsMain.class.getName()).log(Level.SEVERE, null, ex);
                }
           
            boolean isSameComunityToBack=isSameComunity(comunity);
            contg=(isSameComunityToBack)?contg+1:0;
            lblIterationRepTemp.setText(contg+"");
            canBetter=(contg<iSameIterationToChange);
            conti++;
        }
        
        int pixelPCelda=25;
        //Aniquiladores2 an=new Aniquiladores2();
        if(jTable1==null)jTable1 = new javax.swing.JTable();
        //List<String> trueTable=an.getListTrueTable(this.grado);
        Object[][] thaoFuncion=new Object[iNumberDiferentBooleanFunctions][8];
       
        
        for(int i=0;i<iNumberDiferentBooleanFunctions;i++)
        {
            BooleanFunctionInfo bfiItemInfo=comunity.get(i);
            thaoFuncion[i][0]=i+1;
            thaoFuncion[i][1]=bfiItemInfo.getFNA();
            thaoFuncion[i][2]=bfiItemInfo.getBooleanFunction();
            thaoFuncion[i][3]=bfiItemInfo.getiWeith();
            thaoFuncion[i][4]=bfiItemInfo.getAlgebraicDegree();
            thaoFuncion[i][5]=bfiItemInfo.getNL();
            thaoFuncion[i][6]=bfiItemInfo.getAnnhilatorInmunity();
            thaoFuncion[i][7]=bfiItemInfo.getAbsoluteIndicator();
        }
        
        String[] aTitles="i|FNA|Funci√≥n|Peso|Grado|NL|InAn|InAbs".split("\\|");
       
       
         jTable1.setModel(new javax.swing.table.DefaultTableModel(
           thaoFuncion,aTitles
        ){ 
            /*public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }*/
        });
        panelArea.setViewportView(jTable1);
        //System.out.println("*****  \n "+iSameIterationToChange+"***Iteration "+(conti));
    }
    static private boolean isSameComunity(List<BooleanFunctionInfo> comunity)
    {
        boolean bResult=true;
        if(comunityTemp!=null)
        {
        for(int i=0;i<comunity.size();i++)
        {
            System.out.println(comunity.get(i).getHashCodeBooleanFunction()+" "+comunityTemp.get(i).getHashCodeBooleanFunction());
            bResult=bResult&&(comunity.get(i).getFitnessValue()==comunityTemp.get(i).getFitnessValue());
        }
        }else
        {
            bResult=false;
        } 
        comunityTemp=new ArrayList();
        for(BooleanFunctionInfo bfiItemInfo:comunity)
        {
            comunityTemp.add(bfiItemInfo);
        }
        return bResult;
    }
    static private String GetStringInfo(BooleanFunctionInfo bfiItemInfo)
        {
            String sResult="";
            String sItemBooleanFunction=bfiItemInfo.getBooleanFunction();
            sResult+="FV,"+bfiItemInfo.getFitnessValue();
             /*******/
            double iWeith=bfiItemInfo.getiWeith();
            String sWeith=(iWeith+"");
            sResult+=",WT,"+sWeith;
            ////
            //NL//
            String sNL=bfiItemInfo.getNL()+"";
            sResult+=",NL,"+sNL;
             ////
            //Balancedness//
            String sBalancedness=((bfiItemInfo.isBalanced())?"1":"0");
            sResult+=",Bal,"+(sBalancedness.equals("0")?"No":"Si");
            ////
            //simetria//
            String sSimetria=bfiItemInfo.isSimetric()?"1":"0";//((abfItem.isSimetricFunction(sItemBooleanFunction,aThaos))?"1":"0");
            sResult+=",Sim,"+(sSimetria.equals("0")?"No":"Si");
            ////
            //Indicador Absoluto//
            String sIndicadorAbsoluto=bfiItemInfo.getAbsoluteIndicator()+"";
            sResult+=",AI,"+sIndicadorAbsoluto;
            ////
            //ANF//
            //String sFNA=abfItem.getANF(iDegree,bfiItemInfo.getOnSet(),false);
                //sResult+=(sFNA + "\n");
                ////
                //Algebraic degree//
            String sgradoAlgebraico=bfiItemInfo.getAlgebraicDegree()+"";
            sResult+=",AD,"+sgradoAlgebraico;
                //endTimeWithOutAnihilator=System.currentTimeMillis();
                //System.out.print(sgradoAlgebraico+"\t");
                ////
            //Anihilator inmunity//
            double dAnnInm=bfiItemInfo.getAnnhilatorInmunity();
            sResult+=",InAN,"+dAnnInm;
            sResult+=",f"+sItemBooleanFunction;
            sResult+="\n";
            return sResult;
            
        }
    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        //initGeneticAlgorithm();
        String[] aTitles="i|FNA|Funci√≥n|Peso|Grado|NL|InAn|InAbs".split("\\|");
        Object[][] thaoFuncion=new Object[0][8];
        if(jTable1==null)jTable1 = new javax.swing.JTable();
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            thaoFuncion,aTitles
        ){
            /*public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }*/
        });
        panelArea.setViewportView(jTable1);
        this.lblGR.setText("0");
        this.lblNGRPP.setText("0");
        this.lblNIteration.setText("0");
        this.lblSumaryAD.setText("0");
        this.lblSumaryInA.setText("0");
        this.lblSumaryNL.setText("0");
        this.lblSumaryOEA.setText("0");
        this.lblSumaryWeith.setText("0");
        myThreadF hiloAnalisis = new myThreadF();//HerramientaMapleLocal
        hiloAnalisis.run();

    }//GEN-LAST:event_btnFindActionPerformed

    private void btnOpenRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenRecordsActionPerformed
        try {
            // TODO add your handling code here:
            Desktop dt = Desktop.getDesktop();
            dt.open(new File(fileName));
        } catch (IOException ex) {
            Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOpenRecordsActionPerformed

    private void txtBDegreeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBDegreeKeyReleased
        // TODO add your handling code here:
                  this.txtBDegree.setText(this.txtBDegree.getText().replaceAll("\n",""));
        boolean isActive=false;
        int newNumber=0;
        try
        {
            newNumber=Integer.parseInt(this.txtBDegree.getText());
        }catch(NumberFormatException ex){
            newNumber=0;
        }
        int numGen=0;
         try
        {
            numGen=Integer.parseInt(this.txtDifferentNumberBooleanf.getText());
        }catch(NumberFormatException ex){
            numGen=0;
        }
        if(newNumber>0&&numGen>0)
        {
            isActive=true;
        }
        this.txtBDegree.setText(newNumber+"");        
        this.btnFind.setEnabled(isActive);
        
        
    }//GEN-LAST:event_txtBDegreeKeyReleased

    private void txtDifferentNumberBooleanfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDifferentNumberBooleanfKeyReleased
        // TODO add your handling code here:
                 this.txtDifferentNumberBooleanf.setText(this.txtDifferentNumberBooleanf.getText().replaceAll("\n",""));
        boolean isActive=false;
        int newNumber=0;
        try
        {
            newNumber=Integer.parseInt(this.txtDifferentNumberBooleanf.getText());
        }catch(NumberFormatException ex){
            newNumber=0;
        }
        int numGen=0;
         try
        {
            numGen=Integer.parseInt(this.txtBDegree.getText());
        }catch(NumberFormatException ex){
            numGen=0;
        }
        if(newNumber>0&&numGen>0)
        {
            isActive=true;
        }
        this.txtDifferentNumberBooleanf.setText(newNumber+"");        
        this.btnFind.setEnabled(isActive);
    }//GEN-LAST:event_txtDifferentNumberBooleanfKeyReleased

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        // TODO add your handling code here:
         helpWindow helpwindow=new helpWindow((Frame)this.getParent(),true);
        helpwindow.setVisible(true);
    }//GEN-LAST:event_btnHelpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(findBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(findBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(findBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(findBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                findBF dialog = new findBF(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnOpenRecords;
    private javax.swing.JRadioButton chkNotRandom;
    private javax.swing.JRadioButton chkRandom;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblGR;
    private javax.swing.JLabel lblNGRPP;
    private javax.swing.JLabel lblNIteration;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSumaryAD;
    private javax.swing.JLabel lblSumaryInA;
    private javax.swing.JLabel lblSumaryNL;
    private javax.swing.JLabel lblSumaryOEA;
    private javax.swing.JLabel lblSumaryWeith;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JScrollPane panelArea;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JSpinner spnAD;
    private javax.swing.JSpinner spnBalance;
    private javax.swing.JSpinner spnInA;
    private javax.swing.JSpinner spnNL;
    private javax.swing.JSpinner spnOEA;
    private javax.swing.JTextPane txtBDegree;
    private javax.swing.JTextPane txtCM;
    private javax.swing.JTextPane txtDifferentNumberBooleanf;
    // End of variables declaration//GEN-END:variables
public class myThreadF{
        public myThreadF()//HerramientaMaple parameter
        {
            //HerramientaMapleLocal=parameter;  
          /*  try {
                //MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true);
                new HerramientaMaple();
            } catch (MapleException ex) {
                Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        }

        public void run() {
         
             runAnalizer();
        }
        public void runAnalizer()
     {
     //this.setVisible(true);
         initGeneticAlgorithm();
     /*Thread worker = new Thread() {
         
     @Override
     public void run() {   
        /*  try {
             //new HerramientaMaple2();
            
              eng = new HerramientaMaple2();
         } catch (MapleException ex) {
             Logger.getLogger(booleanFunctions.class.getName()).log(Level.SEVERE, null, ex);
         }*/
            
         /*   this.stop();
       
     }
     };
     worker.start();*/
     }

    }
}
