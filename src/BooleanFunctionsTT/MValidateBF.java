/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BooleanFunctionsTT;

import com.maplesoft.externalcall.MapleException;
import java.awt.Cursor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import utileria.Maple.HerramientaMaple;

/**
 *
 * @author wllmNunez
 */
public class MValidateBF extends javax.swing.JDialog {

    /**
     * Creates new form MValidateBF
     */
    
    private int grado;
    private String funcion;
    public String StringResults;
    private HerramientaMaple HerramientaMapleLocal;

    public MValidateBF(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public MValidateBF(java.awt.Frame parent, boolean modal, int degree, String function) {
        super(parent, modal);
        initComponents();
        this.grado = degree;
        double functionWeith=Math.pow(2, degree);
        while(function.length()<functionWeith)
        {
            function+="0";
        }
        this.funcion = function;
        activeChk(true);
        //System.out.println("asdasd");
    }

    /** 
    * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        canvas2 = new java.awt.Canvas();
        pbProperties = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtANF = new javax.swing.JTextArea();
        btnAceptar = new javax.swing.JButton();
        btnAnalizar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        lblResult = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblSimetry = new javax.swing.JLabel();
        chkFNA = new javax.swing.JCheckBox();
        chkGrado = new javax.swing.JCheckBox();
        chkIndicadorAbsoluto = new javax.swing.JCheckBox();
        lblDegree = new javax.swing.JLabel();
        chkPeso = new javax.swing.JCheckBox();
        lblTimeBalancedness = new javax.swing.JLabel();
        lblTimeSimetry = new javax.swing.JLabel();
        lblTimeAD = new javax.swing.JLabel();
        lblTimeANF = new javax.swing.JLabel();
        lblTimeNL = new javax.swing.JLabel();
        lblTimeAI = new javax.swing.JLabel();
        lblTimeWeight = new javax.swing.JLabel();
        chkNL = new javax.swing.JCheckBox();
        lblNL = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        chkSimetrica = new javax.swing.JCheckBox();
        lblInmunidad = new javax.swing.JLabel();
        lblIndicator = new javax.swing.JLabel();
        chkBalanceada = new javax.swing.JCheckBox();
        lblBalancedness = new javax.swing.JLabel();
        lblTimeIndicator = new javax.swing.JLabel();
        chkInmunidad = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Panel de Informacion");
        setMinimumSize(new java.awt.Dimension(516, 643));

        pbProperties.setMaximum(10000);

        txtANF.setEditable(false);
        txtANF.setColumns(20);
        txtANF.setLineWrap(true);
        txtANF.setRows(5);
        jScrollPane1.setViewportView(txtANF);

        btnAceptar.setText("Aceptar");
        btnAceptar.setEnabled(false);
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        lblSimetry.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        chkFNA.setText("FNA");

        chkGrado.setText("Grado Algebraico");
        chkGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGradoActionPerformed(evt);
            }
        });

        chkIndicadorAbsoluto.setText("Indicador Abdoluto");

        lblDegree.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        chkPeso.setText("Peso");
        chkPeso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPesoActionPerformed(evt);
            }
        });

        lblTimeBalancedness.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeBalancedness.setToolTipText("");

        lblTimeSimetry.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeSimetry.setToolTipText("");

        lblTimeAD.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeAD.setToolTipText("");

        lblTimeANF.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeANF.setToolTipText("");

        lblTimeNL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeNL.setToolTipText("");

        lblTimeAI.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeAI.setToolTipText("");

        lblTimeWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeWeight.setToolTipText("");

        chkNL.setText("NL");

        lblNL.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        lblWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        chkSimetrica.setText("Simetrica");
        chkSimetrica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSimetricaActionPerformed(evt);
            }
        });

        lblInmunidad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInmunidad.setToolTipText("");

        lblIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        chkBalanceada.setText("Balanceada");
        chkBalanceada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBalanceadaActionPerformed(evt);
            }
        });

        lblBalancedness.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        lblTimeIndicator.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTimeIndicator.setToolTipText("");

        chkInmunidad.setText("Inmunidad de aniquilador");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkPeso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(96, 96, 96))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(108, 108, 108))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkBalanceada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(64, 64, 64))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkSimetrica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(76, 76, 76))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkIndicadorAbsoluto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(28, 28, 28))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkGrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(38, 38, 38))
                            .addComponent(chkInmunidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDegree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSimetry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBalancedness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblInmunidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTimeAD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeAI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeSimetry, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeWeight, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeBalancedness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeANF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkFNA, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                        .addGap(281, 281, 281)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTimeWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chkPeso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTimeNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(chkNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(21, 21, 21)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTimeBalancedness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBalancedness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chkBalanceada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSimetry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTimeSimetry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(chkSimetrica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTimeIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblIndicator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chkIndicadorAbsoluto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTimeAD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDegree, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chkGrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTimeAI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblInmunidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(chkInmunidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTimeANF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(chkFNA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel9.setText("Propiedades de la Funcion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnalizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAceptar))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(canvas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pbProperties, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblResult, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(canvas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnalizar)
                    .addComponent(btnGuardar)
                    .addComponent(btnAceptar))
                .addGap(1, 1, 1)
                .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
      // TODO add your handling code here:
        //runAnalizer();
        myThread hiloAnalisis = new myThread();//HerramientaMapleLocal
        hiloAnalisis.run();
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        savePanel dialog = new savePanel(new javax.swing.JFrame(), true, StringResults);
        dialog.show();
        //System.out.println(dialog.getName());
        if (!dialog.sOperation.equals("")) {
            lblResult.setText("Operacion Guardar:" + dialog.sOperation);
        } else {
            lblResult.setText("");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void chkPesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPesoActionPerformed

    private void chkBalanceadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBalanceadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkBalanceadaActionPerformed

    private void chkSimetricaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSimetricaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSimetricaActionPerformed

    private void chkGradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGradoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkGradoActionPerformed

    /**
     * @param args the commabfItemd line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MValidateBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MValidateBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MValidateBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MValidateBF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the dialog */
        // System.out.println("asdasd");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true);

                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnGuardar;
    private java.awt.Canvas canvas1;
    private java.awt.Canvas canvas2;
    private javax.swing.JCheckBox chkBalanceada;
    private javax.swing.JCheckBox chkFNA;
    private javax.swing.JCheckBox chkGrado;
    private javax.swing.JCheckBox chkIndicadorAbsoluto;
    private javax.swing.JCheckBox chkInmunidad;
    private javax.swing.JCheckBox chkNL;
    private javax.swing.JCheckBox chkPeso;
    private javax.swing.JCheckBox chkSimetrica;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBalancedness;
    private javax.swing.JLabel lblDegree;
    private javax.swing.JLabel lblIndicator;
    private javax.swing.JLabel lblInmunidad;
    private javax.swing.JLabel lblNL;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblSimetry;
    private javax.swing.JLabel lblTimeAD;
    private javax.swing.JLabel lblTimeAI;
    private javax.swing.JLabel lblTimeANF;
    private javax.swing.JLabel lblTimeBalancedness;
    private javax.swing.JLabel lblTimeIndicator;
    private javax.swing.JLabel lblTimeNL;
    private javax.swing.JLabel lblTimeSimetry;
    private javax.swing.JLabel lblTimeWeight;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JProgressBar pbProperties;
    private javax.swing.JTextArea txtANF;
    // End of variables declaration//GEN-END:variables
public class myThread {

        HerramientaMaple HerramientaMapleLocal;

        public myThread()//HerramientaMaple parameter
        {
            //HerramientaMapleLocal=parameter;
        }

        public void run() {
            try {
                //MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true);
                analizer();
            } catch (MapleException ex) {
                Logger.getLogger(MValidateBF.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    /*public void runAnalizer()
     {
     //this.setVisible(true);
     Thread worker = new Thread() {
     public void run() {   
     try {
     //MValidateBF dialog = new MValidateBF(new javax.swing.JFrame(), true);
     analizer();
     } catch (MapleException ex) {
     Logger.getLogger(MValidateBF.class.getName()).log(Level.SEVERE, null, ex);
     }
     }
     };
     worker.start();
     }*/
private void enableChk(boolean active)
{
        this.chkBalanceada.setEnabled(active);
        this.chkFNA.setEnabled(active);
        this.chkGrado.setEnabled(active);
        this.chkIndicadorAbsoluto.setEnabled(active);
        this.chkInmunidad.setEnabled(active);
        this.chkNL.setEnabled(active);
        this.chkPeso.setEnabled(active);
        this.chkSimetrica.setEnabled(active);
}
private void activeChk(boolean active)
{
        this.chkBalanceada.setSelected(active);
        this.chkFNA.setSelected(active);
        this.chkGrado.setSelected(active);
        this.chkIndicadorAbsoluto.setSelected(active);
        this.chkInmunidad.setSelected(active);
        this.chkNL.setSelected(active);
        this.chkPeso.setSelected(active);
        this.chkSimetrica.setSelected(active);
}
    private void analizer() throws MapleException {
        
        enableChk(false);
        long lStartTime;
        long lEndTime;
        int iAdvanceCounter = 0;
        double dItemsNumber = Math.pow(2, grado);
        double dIncrement = 10000 / (dItemsNumber);
        double dPercent = 10000.0 * 0.01;
        String sComandsMaple = "";
        String sComandsMaplePlus1 = "";
        btnAnalizar.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        AnalisysBFLocal abfItem = new AnalisysBFLocal();

        
        List<List> lstOnSet=abfItem.getListIntOnSet(funcion);
        List<List> lstOnSetFplus1=abfItem.getListIntOnSet(funcion,true);
        List<Integer> lstWalshSpectra=abfItem.getWalshSpectra(funcion);
        List<String> lstThaos = abfItem.getListTrueTable(grado);
        String sAlgebraicDegree="";
        String sTimesAD="";
        String sNL="";
        String sTimeNl="";
        String sWeight="";
        String stimeWeight="";
        String sBalancedness="";
        String timeBalancedness="";
        String sSimetry="";
        String sTimeSimetry="";
        String sAbsolutIndicator="";
        String stimeIndicatorAbsolute="";
        String sAniquilador="";
        String sTimesAI="";
        
        /*
         lStartTime = System.currentTimeMillis();
         lEndTime = System.currentTimeMillis();
         lEndTime-lStartTime;
         */
        //Weight//
        int iWeight=abfItem.getWeight(funcion);
        if(this.chkPeso.isSelected())
        {
            lStartTime = System.currentTimeMillis();
            //iWeight = abfItem.getWeight(funcion);
            lEndTime = System.currentTimeMillis();
            stimeWeight = (lEndTime - lStartTime) + "";
            sWeight = (iWeight + ":" + funcion.length());
            lblWeight.setText(sWeight);
            this.lblTimeWeight.setText(stimeWeight + " ms");
            iAdvanceCounter += 6 * dPercent * dIncrement;
            pbProperties.setValue(iAdvanceCounter);
        }
        ////
        //Walsh Specktra//
        if(this.chkNL.isSelected())
        {
        lStartTime = System.currentTimeMillis();
        sNL = abfItem.getNL(lstWalshSpectra) + "";
        lEndTime = System.currentTimeMillis();
        sTimeNl = (lEndTime - lStartTime) + "";
        lblNL.setText(sNL);
        lblTimeNL.setText(sTimeNl + " ms");
        iAdvanceCounter += 10 * dPercent * dIncrement;
        pbProperties.setValue(iAdvanceCounter);
        }
        ////
        //Balancedness//
        if(this.chkBalanceada.isSelected()){
        lStartTime = System.currentTimeMillis();
        sBalancedness = ((abfItem.isBalanced(lstWalshSpectra)) ? "1" : "0");
        lEndTime = System.currentTimeMillis();
        timeBalancedness = (lEndTime - lStartTime) + "";
        lblBalancedness.setText((sBalancedness.equals("0") ? "No" : "Si"));
        this.lblTimeBalancedness.setText(timeBalancedness + " ms");
        iAdvanceCounter += 3 * dPercent * dIncrement;
        pbProperties.setValue(iAdvanceCounter);
        }
        ////
        //simetry//
        if(this.chkSimetrica.isSelected()){
        lStartTime = System.currentTimeMillis();
       
        sSimetry = ((abfItem.isSimetricFunction(funcion, lstThaos)) ? "1" : "0");
        lEndTime = System.currentTimeMillis();
        sTimeSimetry = (lEndTime - lStartTime) + "";
        lblSimetry.setText((sSimetry.equals("0") ? "No" : "Si"));
        lblTimeSimetry.setText(sTimeSimetry + " ms");
        iAdvanceCounter += 11 * dPercent * dIncrement;
        //30
        pbProperties.setValue(iAdvanceCounter);
        }
        ////

        //Indicador Absoluto//
        if(this.chkIndicadorAbsoluto.isSelected()){
        lStartTime = System.currentTimeMillis();
        HashMap hmTahoFuncion = new HashMap();
        for (int i = 0; i < lstThaos.size(); i++) {
            String sFv = funcion.substring(i, i + 1);
            if (sFv.equals("1")) {
                hmTahoFuncion.put(lstThaos.get(i), Integer.parseInt(sFv));
            }
        }
        List<Integer> lstCorrelationCoeffient = new ArrayList();
        double dSubIncrement = (30 * dPercent * dIncrement) / lstThaos.size();
        for (int i = 0; i < lstThaos.size(); i++) {
            lstCorrelationCoeffient.add(abfItem.autoCorrelationCoeffient(lstThaos.get(i), funcion, lstThaos, hmTahoFuncion));
            pbProperties.setValue(iAdvanceCounter + (int) (dSubIncrement * (i + 1)));
        }
        sAbsolutIndicator = abfItem.getMaxVAIntArray(lstCorrelationCoeffient) + "";
        lEndTime = System.currentTimeMillis();
        stimeIndicatorAbsolute = (lEndTime - lStartTime) + "";
        lblIndicator.setText(sAbsolutIndicator);
        lblTimeIndicator.setText(stimeIndicatorAbsolute + " ms");
        iAdvanceCounter += 30 * dPercent * dIncrement;
        pbProperties.setValue(iAdvanceCounter);
        }
        ////
        
        //ANF && AD//   
        String sANF="-";
        long lAD=0;
        lStartTime = System.currentTimeMillis();
        if(this.chkFNA.isSelected() && this.chkGrado.isSelected())
        {
        
      
       
           if(iWeight%2==1)
           {
               sANF=abfItem.getANF(funcion,grado);
               lAD=grado;
           }else{
           Object[] aResultANF=abfItem.getANFAndAD(funcion,grado);
           lAD=Long.parseLong(aResultANF[1]+"");
           sANF=aResultANF[0]+"";
           }
        }else{
            if(this.chkFNA.isSelected())
            {
                sANF=abfItem.getANF(funcion,grado);
            }else{
                  lAD=(iWeight%2==1)?grado:abfItem.getAD(funcion,grado);
            }
        }
        
        lEndTime = System.currentTimeMillis();
        String sTimeANF = (lEndTime - lStartTime) + "";
        iAdvanceCounter += 20 * dPercent * dIncrement;
        txtANF.setText(sANF);
        lblTimeANF.setText(sTimeANF + " ms");
        iAdvanceCounter += 20 * dIncrement;
        pbProperties.setValue(iAdvanceCounter);
        ////
        
        //Algebraic degree//
        if(this.chkGrado.isSelected()){
        sAlgebraicDegree = lAD+"";
        sTimesAD = ((iWeight%2==1)?0:sTimeANF) + "";
        lblDegree.setText(sAlgebraicDegree);
        lblTimeAD.setText(sTimesAD + " ms");
        iAdvanceCounter += 5 * dPercent * dIncrement;
        pbProperties.setValue(iAdvanceCounter);
        }
        ////     
        //Anihilator inmunity//
        if(this.chkInmunidad.isSelected())
        {
            lStartTime = System.currentTimeMillis();
            sAniquilador = "0";
            //List<String> lstGenericPolinomy = abfItem.getGenericFuction(grado, (int) Math.floor(grado / 2.0));
            //boolean haveAnhilator;
            //String sHaveAnhilator;
            double iAnnInm=0;
              try {
                    //iAnnInm= abfItem.getMaxAnnhilatorInmunity(iDegree, lstOnSet, lstOnSetFplus1);
                    //iAnnInm= abfItem.getMaxAnnhilatorInmunity(iDegree, lstOnSet, lstOnSetFplus1);
                    iAnnInm= abfItem.getMaxAnnhilatorInmunity(grado, lstOnSet, lstOnSetFplus1);
                }catch (MapleException ex) {
                    iAnnInm = -1;
                txtANF.setText(ex.getMessage());
                } catch (TimeoutException ex) {
                Logger.getLogger(MValidateBF.class.getName()).log(Level.SEVERE, null, ex);
            }
            lEndTime = System.currentTimeMillis();
            sTimesAI = (lEndTime - lStartTime) + "";
            lblInmunidad.setText(sAniquilador.equals("-") ? "No Disponible" : iAnnInm+"");
            lblTimeAI.setText(sTimesAI + " ms");
            iAdvanceCounter += 15 * dPercent * dIncrement;
            pbProperties.setValue(iAdvanceCounter);
        }
        ////  
        //funcion booleana, Orden,ANF,Tiempo ANF,Grado Algebraico,Tiempo ANF,No-Linalidad,Tiempo NL,Weight,Tiempo Weight,Balanceo,Tiempo Balanceo,Simetrica,Tiempo Simetry,Indicador Absoluto, Tiempo Indicador Absoluto,Inmunidad de Aniquilador,Tiempo Inmunidad de Aniquilador 
        StringResults = funcion + "," + grado + "," + sANF + "," + sTimeANF + "," + sAlgebraicDegree + "," + sTimesAD + "," + sNL + "," + sTimeNl + "," + sWeight + "," + stimeWeight + "," + sBalancedness + "," + timeBalancedness + "," + sSimetry + "," + sTimeSimetry + "," + sAbsolutIndicator + "," + stimeIndicatorAbsolute + "," + sAniquilador + "," + sTimesAI + "\n";
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        btnAceptar.setEnabled(true);
        btnGuardar.setEnabled(true);
        enableChk(true);
        try {
            abfItem.saveWalshSpectra(lstWalshSpectra, "WalshSpectra.csv");
            abfItem.saveEquationsSystemComandsMaple(sComandsMaple + sComandsMaplePlus1, "EquationsSystemComandsMaple.txt");
        } catch (IOException ex) {
            Logger.getLogger(MValidateBF.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Almacenar los archivos de maple y walsh spectra
    }
}
